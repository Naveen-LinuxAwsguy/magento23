apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-adobe-commerece
  labels:
    prj: Etisalat-dev
spec:
  selector:
    matchLabels:
      prj: Etisalat-dev
  template:
    metadata:
      labels:
        prj: Etisalat-dev
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node"
                operator: In
                values: ["node1"]
      containers:
        - name: mysql-adobe-commerece-dev
          image: mysql:8.0
          imagePullPolicy: IfNotPresent
          
          ports:
            - containerPort: 3306
              name: mysql
          env:
        
            - name: "MYSQL_USER"
              valueFrom:
              
              
              
              apiVersion: v1
kind: PersistentVolume
metadata:
  name: azurefile
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  azureFile:
    secretName: azure-secret
    shareName: aksshare
    readOnly: false
  mountOptions:
  - dir_mode=0777
  - file_mode=0777
  - uid=1000
  - gid=1000
  - mfsymlinks
  - nobrl
  
  
  
                secretKeyRef: 
                 name: mysql-db-password
                 key: MYSQL_USER
            - name: "MYSQL_PASSWORD"
              valueFrom:
                secretKeyRef: 
                 name: mysql-db-password
                 key: MYSQL_PASSWORD
            - name: "MYSQL_DATABASE"
              valueFrom:
                 secretKeyRef: 
                  name: mysql-db-password
                  key: MYSQL_DATABASE
            - name: "MYSQL_ROOT_PASSWORD"
              valueFrom:
                secretKeyRef: 
                 name: mysql-db-password
                 key: MYSQL_ROOT_PASSWORD
          volumeMounts:
            - name: default-pv
              mountPath: /var/lib/mysql
              subPath: test

          resources:
               limits:
                 memory: 500Mi
                 cpu: 500m
               requests:
                  memory: 100Mi
                  cpu: 100m  
      volumes:
        - name: default-pv
          persistentVolumeClaim:
            claimName: test

---
apiVersion: v1
kind: Service
metadata: 
  name: backend
spec:
  type: ClusterIP
  selector:
    prj: Etisalat-dev
  ports: 
    - port: 3306  
      targetPort: 3306
      
      
      
      
      
      apiVersion: v1
kind: Secret
metadata:
  name: mysql-db-password
type: Opaque
data:
  MYSQL_PASSWORD: TG9naW4jMjIK
  MYSQL_ROOT_PASSWORD: TG9naW4jMjIK
  MYSQL_USER: bWFnZW50bw==
  MYSQL_DATABASE: bWFnZW50bw==
  
  
  apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: private-azurefile-csi
provisioner: file.csi.azure.com
allowVolumeExpansion: true
parameters:
  resourceGroup: <resourceGroup>
  storageAccount: <storageAccountName>
  server: <storageAccountName>.privatelink.file.core.windows.net 
reclaimPolicy: Delete
volumeBindingMode: Immediate
mountOptions:
  - dir_mode=0777
  - file_mode=0777
  - uid=0
  - gid=0
  - mfsymlinks
  - cache=strict  # https://linux.die.net/man/8/mount.cifs
  - nosharesock  # reduce probability of reconnect race
  - actimeo=30  # reduce latency for metadata-heavy workload
  
  
  
  
  https://learn.microsoft.com/en-us/azure/aks/azure-files-volume
  
  
  apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  labels:
  
  
  
  apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch1
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  strategy:
    type: Recreate 
  template: 
    metadata: 
      labels: 
        app: elasticsearch
    spec: 
      containers:
        - name: elasticsearch
          image: magento/magento-cloud-docker-elasticsearch:7.10-1.3.2
---          
apiVersion: v1
kind: Service
metadata: 
  name: elasticsearch
spec:
  selector:
    app: elasticsearch
  ports: 
    - port: 9200
  clusterIP: None # This means we are going to use Pod IP  
          
    app: nginx
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "PROJ-DEV-ADOBE-TRNS-MAGENTO-AKS-SERVICES-SN"
spec:
  # You can change it to NodePort if you are planning to use the service only through App Gateway
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: nginx
    
    
    I am currently following this guide here to create a PV using an existing Azure File Share: https://learn.microsoft.com/en-us/azure/aks/azure-files-volume

The method is to store the storage account name and access key in a secret azure secret then use it in the csi section of the yaml file as below.

apiVersion: v1
kind: PersistentVolume
metadata:
  name: azurefile
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    readOnly: false
    volumeHandle: unique-volumeid  # make sure this volumeid is unique in the cluster
    volumeAttributes:
      resourceGroup: EXISTING_RESOURCE_GROUP_NAME  # optional, only set this when storage account is not in the same resource group as agent node
      shareName: aksshare
    nodeStageSecretRef:
      name: azure-secret
      namespace: default
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl




apiVersion: v1
kind: PersistentVolume
metadata:
  name: azurefile-mysql
  namespace: devcommerece
spec:
  capacity:
    storage: 200Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    readOnly: false
    volumeHandle: unique-volume
    volumeAttributes:
      shareName: mysqldev
    nodeStageSecretRef:
      name: azure-fileshare-secret
      namespace: devcommerece
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl
    
    
    kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysql-pvc
  namespace: devcommerece
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi
  storageClassName: azurefile-csi
  
  apiVersion: v1
kind: PersistentVolume
metadata:
  name: azurefile-mysql
  namespace: devcommerece
spec:
  capacity:
    storage: 200Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    readOnly: false
    volumeHandle: unique-volumeid  # make sure this volumeid is unique in the cluster
    volumeAttributes:
      resourceGroup: PROJ-DEV-DGTL-EXP-PLTFRM-ADOBE-MAGENTO-RG # optional, only set this when storage account is not in the same resource group as agent node
      shareName: mysqldev
    nodeStageSecretRef:
      name: azure-fileshare-secret
      namespace: devcommerece
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl
~
~

php bin/magento setup:install \
               --base-url=http://20.232.241.225/  \
               --db-host=sqlservice \
               --db-name=magento \
               --db-user=magento \
               --db-password=MyNewPass4! \
               --backend-frontname=admin \
               --admin-firstname=naveen \
               --admin-lastname=vasudevan \
               --admin-email=naidunaveen6@gmail.com \
               --admin-user=naveen \
               --admin-password=Naveen#2246 \
               --language=en_US \
               --currency=USD \
               --timezone=America/Chicago \
               --use-rewrites=1 \
               --search-engine=elasticsearch7 \
               --elasticsearch-host=elasticsearch \
               --elasticsearch-port=9200 


