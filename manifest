apiVersion: v1
kind: Namespace
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
  name: ingress-nginx
---
apiVersion: v1
automountServiceAccountToken: true
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx
  namespace: ingress-nginx
---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-admission
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx
  namespace: ingress-nginx
rules:
- apiGroups:
  - ""
  resources:
  - namespaces
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - configmaps
  - pods
  - secrets
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resourceNames:
  - ingress-nginx-leader
  resources:
  - configmaps
  verbs:
  - get
  - update
- apiGroups:
  - ""
  resources:
  - configmaps
  verbs:
  - create
- apiGroups:
  - coordination.k8s.io
  resourceNames:
  - ingress-nginx-leader
  resources:
  - leases
  verbs:
  - get
  - update
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-admission
  namespace: ingress-nginx
rules:
- apiGroups:
  - ""
  resources:
  - secrets
  verbs:
  - get
  - create
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx
rules:
- apiGroups:
  - ""
  resources:
  - configmaps
  - endpoints
  - nodes
  - pods
  - secrets
  - namespaces
  verbs:
  - list
  - watch
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
- apiGroups:
  - ""
  resources:
  - services
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - events
  verbs:
  - create
  - patch
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses/status
  verbs:
  - update
- apiGroups:
  - networking.k8s.io
  resources:
  - ingressclasses
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - list
  - watch
  - get
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-admission
rules:
- apiGroups:
  - admissionregistration.k8s.io
  resources:
  - validatingwebhookconfigurations
  verbs:
  - get
  - update
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx
  namespace: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-nginx
subjects:
- kind: ServiceAccount
  name: ingress-nginx
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-admission
  namespace: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: ingress-nginx-admission
subjects:
- kind: ServiceAccount
  name: ingress-nginx-admission
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-nginx
subjects:
- kind: ServiceAccount
  name: ingress-nginx
  namespace: ingress-nginx
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-admission
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: ingress-nginx-admission
subjects:
- kind: ServiceAccount
  name: ingress-nginx-admission
  namespace: ingress-nginx
---
apiVersion: v1
data:
  allow-snippet-annotations: "true"
kind: ConfigMap
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-controller
  namespace: ingress-nginx
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  externalTrafficPolicy: Local
  ipFamilies:
  - IPv4
  ipFamilyPolicy: SingleStack
  ports:
  - appProtocol: http
    name: http
    port: 80
    protocol: TCP
    targetPort: http
  - appProtocol: https
    name: https
    port: 443
    protocol: TCP
    targetPort: https
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
  type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-controller-admission
  namespace: ingress-nginx
spec:
  ports:
  - appProtocol: https
    name: https-webhook
    port: 443
    targetPort: webhook
  selector:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-controller
  namespace: ingress-nginx
spec:
  minReadySeconds: 0
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app.kubernetes.io/component: controller
      app.kubernetes.io/instance: ingress-nginx
      app.kubernetes.io/name: ingress-nginx
  template:
    metadata:
      labels:
        app.kubernetes.io/component: controller
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
    spec:
      containers:
      - args:
        - /nginx-ingress-controller
        - --publish-service=$(POD_NAMESPACE)/ingress-nginx-controller
        - --election-id=ingress-nginx-leader
        - --controller-class=k8s.io/ingress-nginx
        - --ingress-class=nginx
        - --configmap=$(POD_NAMESPACE)/ingress-nginx-controller
        - --validating-webhook=:8443
        - --validating-webhook-certificate=/usr/local/certificates/cert
        - --validating-webhook-key=/usr/local/certificates/key
        env:
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: LD_PRELOAD
          value: /usr/local/lib/libmimalloc.so
        image: registry.k8s.io/ingress-nginx/controller:v1.5.1@sha256:4ba73c697770664c1e00e9f968de14e08f606ff961c76e5d7033a4a9c593c629
        imagePullPolicy: IfNotPresent
        lifecycle:
          preStop:
            exec:
              command:
              - /wait-shutdown
        livenessProbe:
          failureThreshold: 5
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        name: controller
        ports:
        - containerPort: 80
          name: http
          protocol: TCP
        - containerPort: 443
          name: https
          protocol: TCP
        - containerPort: 8443
          name: webhook
          protocol: TCP
        readinessProbe:
          failureThreshold: 3
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 1
          timeoutSeconds: 1
        resources:
          requests:
            cpu: 100m
            memory: 90Mi
        securityContext:
          allowPrivilegeEscalation: true
          capabilities:
            add:
            - NET_BIND_SERVICE
            drop:
            - ALL
          runAsUser: 101
        volumeMounts:
        - mountPath: /usr/local/certificates/
          name: webhook-cert
          readOnly: true
      dnsPolicy: ClusterFirst
      nodeSelector:
        kubernetes.io/os: linux
      serviceAccountName: ingress-nginx
      terminationGracePeriodSeconds: 300
      volumes:
      - name: webhook-cert
        secret:
          secretName: ingress-nginx-admission
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-admission-create
  namespace: ingress-nginx
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: admission-webhook
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/version: 1.5.1
      name: ingress-nginx-admission-create
    spec:
      containers:
      - args:
        - create
        - --host=ingress-nginx-controller-admission,ingress-nginx-controller-admission.$(POD_NAMESPACE).svc
        - --namespace=$(POD_NAMESPACE)
        - --secret-name=ingress-nginx-admission
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20220916-gd32f8c343@sha256:39c5b2e3310dc4264d638ad28d9d1d96c4cbb2b2dcfb52368fe4e3c63f61e10f
        imagePullPolicy: IfNotPresent
        name: create
        securityContext:
          allowPrivilegeEscalation: false
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: ingress-nginx-admission
---
apiVersion: batch/v1
kind: Job
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-admission-patch
  namespace: ingress-nginx
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/component: admission-webhook
        app.kubernetes.io/instance: ingress-nginx
        app.kubernetes.io/name: ingress-nginx
        app.kubernetes.io/part-of: ingress-nginx
        app.kubernetes.io/version: 1.5.1
      name: ingress-nginx-admission-patch
    spec:
      containers:
      - args:
        - patch
        - --webhook-name=ingress-nginx-admission
        - --namespace=$(POD_NAMESPACE)
        - --patch-mutating=false
        - --secret-name=ingress-nginx-admission
        - --patch-failure-policy=Fail
        env:
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        image: registry.k8s.io/ingress-nginx/kube-webhook-certgen:v20220916-gd32f8c343@sha256:39c5b2e3310dc4264d638ad28d9d1d96c4cbb2b2dcfb52368fe4e3c63f61e10f
        imagePullPolicy: IfNotPresent
        name: patch
        securityContext:
          allowPrivilegeEscalation: false
      nodeSelector:
        kubernetes.io/os: linux
      restartPolicy: OnFailure
      securityContext:
        fsGroup: 2000
        runAsNonRoot: true
        runAsUser: 2000
      serviceAccountName: ingress-nginx-admission
---
apiVersion: networking.k8s.io/v1
kind: IngressClass
metadata:
  labels:
    app.kubernetes.io/component: controller
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: nginx
spec:
  controller: k8s.io/ingress-nginx
---
apiVersion: admissionregistration.k8s.io/v1
kind: ValidatingWebhookConfiguration
metadata:
  labels:
    app.kubernetes.io/component: admission-webhook
    app.kubernetes.io/instance: ingress-nginx
    app.kubernetes.io/name: ingress-nginx
    app.kubernetes.io/part-of: ingress-nginx
    app.kubernetes.io/version: 1.5.1
  name: ingress-nginx-admission
webhooks:
- admissionReviewVersions:
  - v1
  clientConfig:
    service:
      name: ingress-nginx-controller-admission
      namespace: ingress-nginx
      path: /networking/v1/ingresses
  failurePolicy: Fail
  matchPolicy: Equivalent
  name: validate.nginx.ingress.kubernetes.io
  rules:
  - apiGroups:
    - networking.k8s.io
    apiVersions:
    - v1
    operations:
    - CREATE
    - UPDATE
    resources:
    - ingresses
  sideEffects: None
 https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.5.1/deploy/static/provider/cloud/deploy.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: config-reader
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: view
subjects:
  - kind: ServiceAccount
    name: config-reader
    namespace: default
#!/bin/sh
# vim:sw=4:ts=4:et

set -e

entrypoint_log() {
    if [ -z "${NGINX_ENTRYPOINT_QUIET_LOGS:-}" ]; then
        echo "$@"
    fi
}

if [ "$1" = "nginx" -o "$1" = "nginx-debug" ]; then
    if /usr/bin/find "/docker-entrypoint.d/" -mindepth 1 -maxdepth 1 -type f -print -quit 2>/dev/null | read v; then
        entrypoint_log "$0: /docker-entrypoint.d/ is not empty, will attempt to perform configuration"

        entrypoint_log "$0: Looking for shell scripts in /docker-entrypoint.d/"
        find "/docker-entrypoint.d/" -follow -type f -print | sort -V | while read -r f; do
            case "$f" in
                *.envsh)
                    if [ -x "$f" ]; then
                        entrypoint_log "$0: Sourcing $f";
                        . "$f"
                    else
                        # warn on shell scripts without exec bit
                        entrypoint_log "$0: Ignoring $f, not executable";
                    fi
                    ;;
                *.sh)
                    if [ -x "$f" ]; then
                        entrypoint_log "$0: Launching $f";
                        "$f"
                    else
                        # warn on shell scripts without exec bit
                        entrypoint_log "$0: Ignoring $f, not executable";
                    fi
                    ;;
                *) entrypoint_log "$0: Ignoring $f";;
            esac
        done

        entrypoint_log "$0: Configuration complete; ready for start up"
    else
        entrypoint_log "$0: No files found in /docker-entrypoint.d/, skipping configuration"
    fi
fi

exec "$@"

[warn] 1#1: the "user" directive makes sense only if the master process runs with super-user privileges, ignored in /etc/nginx/nginx.conf:2

https://qa-magento-digitalexp.etisalat.corp.ae/&

https://dev-magento-digitalexp.etisalat.corp.ae/&

https://qa-magento-digitalexp.etisalat.corp.ae/&

https://dev-magento-digitalexp.etisalat.corp.ae/&
https://github.com/nginxinc/docker-nginx-unprivileged/tree/main/entrypoint


apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: mysql
  strategy:
    type: Recreate 
  template: 
    metadata: 
      labels: 
        app: mysql
    spec: 
      containers:
        - name: mysql
          image: mysql:8.0
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: dbpassword11
            - name: MYSQL_USER
              value: magento
            - name: MYSQL_DATABASE
              value: magento
            - name: MYSQL_PASSWORD
              value: dbpassword11
          ports:
            - containerPort: 3306
              name: mysql 
         


---
apiVersion: v1
kind: Service
metadata: 
  name: backend
spec:
  type: ClusterIP
  selector:
    app: mysql
  ports: 
    - port: 3306  
      targetPort: 3306







apiVersion: apps/v1
kind: Deployment
metadata:
  name: redis
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: redis
  strategy:
    type: Recreate 
  template: 
    metadata: 
      labels: 
        app: redis
    spec: 
      containers:
        - name: redis 
          image: redis:6.2
---          
apiVersion: v1
kind: Service
metadata: 
  name: redis
spec:
  selector:
    app: redis 
  ports: 
    - port: 6379
  clusterIP: None # This means we are going to use Pod IP  
          
 
 
 
 apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: mysql
spec:
  replicas: 2
  serviceName: mysql
  selector:
    matchLabels:
      app: mysql
  template:
    metadata:
      labels:
        app: mysql
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: mysql
          image: mysql:5.6
          ports:
            - name: tpc
              protocol: TCP
              containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom: 
               secretKeyRef: 
                key: ROOT_PASSWORD
                name: mysecret
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: standard
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: 1Gi
 
 
 https://www.mirantis.com/blog/how-to-use-statefulsets-and-create-a-scalable-mysql-server-on-kubernetes/
 
 -----BEGIN PRIVATE KEY-----
MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDAVdjLlLJer8yn
VmgCUNcdxmlXuyssatELp8eMbmhr8z2q4RnmfMLeL2S8BU/hSxoA3k5qcUiHMKGt
+HtoXejvxj1qnfHRdqy9a5DjgIl6ZM45gGMuWOyrq+tC7uBV7Jrvu63+aotF8YfF
A3vTUfem5FXir7ZyAAZDfWmCSd7c+2hmpOZJlUqun+MVSCq7jMbZszjeS4iBB6bS
P8MrZ6FVUhgqPDVAlIOqxzdrDVyTfQI4TA759Bq1s3gdnGSwTne8g06+e4pKuYkl
MftVl4zwI7sxGy27swfevao3eAqDA9Ppt1EtX44GWzf3ji/950LPiuAw5nMO4x4y
NBwUjYO1AgMBAAECggEAGnEy9vogc6gTqMXWUssuZ+eJQAh5bQfaaZHNe18KeBze
04lS+D8aw1UcskTAsKaUkp39heDBKeTjtXk97iFLDvvgIbJJNpTsNrZ9Gunm/K6z
M3CVMiADma5vD6qrqOR4gJD64MlhEGKeWdWaxni0ZXtq21lw6cdbFRg+0yy4uQSS
USnQqJLhjAZAAEMhrAWxC7BmSe+O/m16fLlkHfQnHWzOQ6sTsy0Jb3Y8lCvySOlW
ht2IzcX8hbPc0lK1cTLNXmnTf5EoTD7ONxGHilYHHzYWeTopxDXr8lwzb8/ojkQd
S04Yc9Mf84FGDqIVHjH5sU0CSQgfkD1X/mWkOYO0WQKBgQDkx42zkqH7DiB5xvIf
ObpT3m1A8Ekpx/KzG+MaOHPzMkWwiwlfb2Z77thyt9sboBbMSaiYWGiybVTi9JVz
IVv3Q9mrM3nMaNBs4l11iDGiaQwrm/ZdTv1ggDtvHINjRquKAmxpYlRNQzpcWyKH
SgFPmNq1vIF7pmpW+ROtu1HEdwKBgQDXODt1Px42B5XbVzm/YnjrEmrKzPDl6W1Y
zLKrlOXIzNiWqP3HJh0Fng05zmaiU2N/vjij8NnRiGaxn+uA4CTybeN9bh7lrW3X
nn9S1V2xGTanTGOFhIdHjY5luWeLYtqLuWUNW3NAHoazuNRWzxYyw+/hF2p2LRAn
xwfr5o+gMwKBgQCMvYqZxwIpDRbDc7UtqnjK8ZGqmmeX8W6H6wb58XK7UNj4c4Av
mrukUFoNsLd1NjXwNPwnxHOcGJBZEngCHKqT4cS9gmxSaMSXx2YRUNif/hnDli2o
V1iejiSCBTt6zlXnD/ibmCceZNY5TMNgERHfYrxhgvbxF35hxNbrUMpLnwKBgQCJ
eppAozkhOmc33dg9sSGcx/7/3TplI19+QgRAJrVCN9iDJSA3ftk7JWM9ceON/cap
a1GzJ798Ya13+bfuc0AmvJt9HEMQZGCuQ8kBmNporrqC1AEe4TGpO3ui73R9TYBd
kOhESA6u/tD9LSw258I+W3t4RgTzyIVxY2pj/rvwkQKBgQCa/i2n9LmQzJ5Tm2aP
em8VKjP369JpTnhtcBqZI343C0BdG1bNMsmkT8MTIxdPeYSawSK/WDQGyDK7YUdG
WDaSl1Y9B+Y6S5HZ9FC/vGJRdEOnGb/xhD6GOwJdZXcM4Q0Lmd8caXvv6r9Fjud5
84g2yzTkgJaGlV5kIqYSNGNF8Q==
-----END PRIVATE KEY-----

https://dev-magento-digitalexp.etisalat.corp.ae/ &

-----BEGIN CERTIFICATE-----
MIIHMTCCBhmgAwIBAgITGAAAHnJG7qUhAC+BQgAAAAAecjANBgkqhkiG9w0BAQsF
ADBZMRIwEAYKCZImiZPyLGQBGRYCYWUxFDASBgoJkiaJk/IsZAEZFgRjb3JwMRgw
FgYKCZImiZPyLGQBGRYIZXRpc2FsYXQxEzARBgNVBAMTClNIQTItSUNBMDEwHhcN
MjIxMDI4MTIwNTU4WhcNMjUxMDI3MTIwNTU4WjB+MQswCQYDVQQGEwJBRTELMAkG
A1UECBMCQUUxDjAMBgNVBAcTBUR1YmFpMREwDwYDVQQKEwhFdGlzYWxhdDENMAsG
A1UECxMEQ0lQRDEwMC4GA1UEAxMnZGV2LW1hZ2VudG8tZGlnaXRhbGV4cC5ldGlz
YWxhdC5jb3JwLmFlMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAwBOI
Z+byHhObUfASkFrQqc543ZLbgQPA61LmqPBD6xHg8UEqoeMpf4pl8daCpEbElBg0
pwjPhNQou6dZgbBR/AdA4FerA3pTGCin2Bata6wSL9e7ychyBjolDjnAy8jnQvgn
/Zkbro1O5GnNfsGNps8YBUBSyln1IvnFOoxeh1JQyBTRcUmyLoxth1rm87eWMlzL
iLfZTg2FhltruFDdQRYRk7R0qV5ocmk01csnVAh9KAR4fQtOcqWRyEW7USbmhRaI
tT0uX1gHsoY51ZSIw3pdkZFBmAo2bVG1n46WIgJnFH8bNoiRlEsx+AEraFjnoodi
PkqzVXhloOZj3nrmUQIDAQABo4IDyzCCA8cwSgYDVR0RBEMwQYInZGV2LW1hZ2Vu
dG8tZGlnaXRhbGV4cC5ldGlzYWxhdC5jb3JwLmFlghZkZXYtbWFnZW50by1kaWdp
dGFsZXhwMB0GA1UdDgQWBBS9tmwKYykLXmonm421lnubzxDw/zAfBgNVHSMEGDAW
gBSxioLz6OtMiP8illUFKGHROqsTsTCCAToGA1UdHwSCATEwggEtMIIBKaCCASWg
ggEhhoGzbGRhcDovLy9DTj1TSEEyLUlDQTAxLENOPUFTMTUwMUFVRkFMMDIsQ049
Q0RQLENOPVB1YmxpYyUyMEtleSUyMFNlcnZpY2VzLENOPVNlcnZpY2VzLENOPUNv
bmZpZ3VyYXRpb24sREM9Y29ycCxEQz1hZT9jZXJ0aWZpY2F0ZVJldm9jYXRpb25M
aXN0P2Jhc2U/b2JqZWN0Q2xhc3M9Y1JMRGlzdHJpYnV0aW9uUG9pbnSGM2h0dHA6
Ly9zaGEyLXdlYi5ldGlzYWxhdC5jb3JwLmFlL2NybC9TSEEyLUlDQTAxLmNybIY0
aHR0cDovL3NoYTItd2ViMS5ldGlzYWxhdC5jb3JwLmFlL2NybC9TSEEyLUlDQTAx
LmNybDCCAXsGCCsGAQUFBwEBBIIBbTCCAWkwgaUGCCsGAQUFBzAChoGYbGRhcDov
Ly9DTj1TSEEyLUlDQTAxLENOPUFJQSxDTj1QdWJsaWMlMjBLZXklMjBTZXJ2aWNl
cyxDTj1TZXJ2aWNlcyxDTj1Db25maWd1cmF0aW9uLERDPWNvcnAsREM9YWU/Y0FD
ZXJ0aWZpY2F0ZT9iYXNlP29iamVjdENsYXNzPWNlcnRpZmljYXRpb25BdXRob3Jp
dHkwXgYIKwYBBQUHMAKGUmh0dHA6Ly9TSEEyLVdlYi5ldGlzYWxhdC5jb3JwLmFl
L0FJQS9BUzE1MDFBVUZBTDAyLmV0aXNhbGF0LmNvcnAuYWVfU0hBMi1JQ0EwMS5j
cnQwXwYIKwYBBQUHMAKGU2h0dHA6Ly9TSEEyLVdlYjEuZXRpc2FsYXQuY29ycC5h
ZS9BSUEvQVMxNTAxQVVGQUwwMi5ldGlzYWxhdC5jb3JwLmFlX1NIQTItSUNBMDEu
Y3J0MAsGA1UdDwQEAwIFoDA9BgkrBgEEAYI3FQcEMDAuBiYrBgEEAYI3FQiEyqVd
gZTAM4WFgSnT2CKG5KsAgTiBqPFFhNLVaAIBZAIBITATBgNVHSUEDDAKBggrBgEF
BQcDATAbBgkrBgEEAYI3FQoEDjAMMAoGCCsGAQUFBwMBMA0GCSqGSIb3DQEBCwUA
A4IBAQCUFXtqCWaawm0JxpU8rBghpKFqiRSwwCtRF49N4CKiDtotxAUBijieuzWb
ZBi5eO+bwJ860QmMR6XSJQLVXVBRuViX5Vlvm4bHOqo69FTN4UFR27PPA/4q0Ntf
qjg+K9M3Yj9hakRQM90r3wPu1HYzfuzYo9T2T5wSbu7Agu392vjRb8JJkyRsa9St
aZ8Z4fItOlOmopSdUwSE/+Qo5P3wbL/gt8spK+hly9udDisECqgOgk0+leAZfRKn
V5bvGAdCLx7FHX86PXLH9BPX8ZlJ6F4oGtBH3wLhCwjfdeQ2523B/0ZFBarTqF0D
k+ojPt0jc+YB3zDdi+DuDI1IwlBn
-----END CERTIFICATE-----

 
 
 
 
 
 kubectl config use-context PROJ-QA-ADOBE-MAGENTO-AKS

https://learn.microsoft.com/en-us/azure/aks/azure-files-csi

kubectl describe pods mysql-etisalat-dev-9f44f87f9-df2tp -n qacommerece



apiVersion: apps/v1
kind: Deployment
metadata:
  name: mysql-adobe-commerece
  labels:
    prj: Etisalat-dev
spec:
  selector:
    matchLabels:
      prj: Etisalat-dev
  template:
    metadata:
      labels:
        prj: Etisalat-dev
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: "node"
                operator: In
                values: ["node1"]
                
                
                https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v0.44.0/deploy/static/provider/cloud/deploy.yaml
      containers:
        - name: mysql-adobe-commerece-dev
          image: mysql:8.0
          imagePullPolicy: IfNotPresent
          
          ports:
            - containerPort: 3306
              name: mysql
          env:
        
            - name: "MYSQL_USER"
              valueFrom:
              
              
              
              apiVersion: v1
kind: PersistentVolume
metadata:
  name: azurefile
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  azureFile:
    secretName: azure-secret
    shareName: aksshare
    readOnly: false
  mountOptions:
  - dir_mode=0777
  - file_mode=0777
  - uid=1000
  - gid=1000
  - mfsymlinks
  - nobrl
  
  
  
                secretKeyRef: 
                 name: mysql-db-password
                 key: MYSQL_USER
            - name: "MYSQL_PASSWORD"
              valueFrom:
                secretKeyRef: 
                 name: mysql-db-password
                 key: MYSQL_PASSWORD
            - name: "MYSQL_DATABASE"
              valueFrom:
                 secretKeyRef: 
                  name: mysql-db-password
                  key: MYSQL_DATABASE
            - name: "MYSQL_ROOT_PASSWORD"
              valueFrom:
                secretKeyRef: 
                 name: mysql-db-password
                 key: MYSQL_ROOT_PASSWORD
          volumeMounts:
            - name: default-pv
              mountPath: /var/lib/mysql
              subPath: test

          resources:
               limits:
                 memory: 500Mi
                 cpu: 500m
               requests:
                  memory: 100Mi
                  cpu: 100m  
      volumes:
        - name: default-pv
          persistentVolumeClaim:
            claimName: test

---
apiVersion: v1
kind: Service
metadata: 
  name: backend
spec:
  type: ClusterIP
  selector:
    prj: Etisalat-dev
  ports: 
    - port: 3306  
      targetPort: 3306
      
      
      
      
      
      apiVersion: v1
kind: Secret
metadata:
  name: mysql-db-password
type: Opaque
data:
  MYSQL_PASSWORD: TG9naW4jMjIK
  MYSQL_ROOT_PASSWORD: TG9naW4jMjIK
  MYSQL_USER: bWFnZW50bw==
  MYSQL_DATABASE: bWFnZW50bw==
  
  
  apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: private-azurefile-csi
provisioner: file.csi.azure.com
allowVolumeExpansion: true
parameters:
  resourceGroup: <resourceGroup>
  storageAccount: <storageAccountName>
  server: <storageAccountName>.privatelink.file.core.windows.net 
reclaimPolicy: Delete
volumeBindingMode: Immediate
mountOptions:
  - dir_mode=0777
  - file_mode=0777
  - uid=0
  - gid=0
  - mfsymlinks
  - cache=strict  # https://linux.die.net/man/8/mount.cifs
  - nosharesock  # reduce probability of reconnect race
  - actimeo=30  # reduce latency for metadata-heavy workload
  
  
  
  
  https://learn.microsoft.com/en-us/azure/aks/azure-files-volume
  
  
  apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  labels:
  
  
  
  apiVersion: apps/v1
kind: Deployment
metadata:
  name: elasticsearch1
spec: 
  replicas: 1
  selector:
    matchLabels:
      app: elasticsearch
  strategy:
    type: Recreate 
  template: 
    metadata: 
      labels: 
        app: elasticsearch
    spec: 
      containers:
        - name: elasticsearch
          image: magento/magento-cloud-docker-elasticsearch:7.10-1.3.2
---          
apiVersion: v1
kind: Service
metadata: 
  name: elasticsearch
spec:
  selector:
    app: elasticsearch
  ports: 
    - port: 9200
  clusterIP: None # This means we are going to use Pod IP  
          
    app: nginx
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
    service.beta.kubernetes.io/azure-load-balancer-internal-subnet: "PROJ-DEV-ADOBE-TRNS-MAGENTO-AKS-SERVICES-SN"
spec:
  # You can change it to NodePort if you are planning to use the service only through App Gateway
  type: LoadBalancer
  ports:
    - port: 80
  selector:
    app: nginx
    
    
    I am currently following this guide here to create a PV using an existing Azure File Share: https://learn.microsoft.com/en-us/azure/aks/azure-files-volume

The method is to store the storage account name and access key in a secret azure secret then use it in the csi section of the yaml file as below.

apiVersion: v1
kind: PersistentVolume
metadata:
  name: azurefile
spec:
  capacity:
    storage: 5Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    readOnly: false
    volumeHandle: unique-volumeid  # make sure this volumeid is unique in the cluster
    volumeAttributes:
      resourceGroup: EXISTING_RESOURCE_GROUP_NAME  # optional, only set this when storage account is not in the same resource group as agent node
      shareName: aksshare
    nodeStageSecretRef:
      name: azure-secret
      namespace: default
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl




apiVersion: v1
kind: PersistentVolume
metadata:
  name: azurefile-mysql
  namespace: devcommerece
spec:
  capacity:
    storage: 200Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    readOnly: false
    volumeHandle: unique-volume
    volumeAttributes:
      shareName: mysqldev
    nodeStageSecretRef:
      name: azure-fileshare-secret
      namespace: devcommerece
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl
    
    
    kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysql-pvc
  namespace: devcommerece
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 200Gi
  storageClassName: azurefile-csi
  
  apiVersion: v1
kind: PersistentVolume
metadata:
  name: azurefile-mysql
  namespace: devcommerece
spec:
  capacity:
    storage: 200Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  storageClassName: azurefile-csi
  csi:
    driver: file.csi.azure.com
    readOnly: false
    volumeHandle: unique-volumeid  # make sure this volumeid is unique in the cluster
    volumeAttributes:
      resourceGroup: PROJ-DEV-DGTL-EXP-PLTFRM-ADOBE-MAGENTO-RG # optional, only set this when storage account is not in the same resource group as agent node
      shareName: mysqldev
    nodeStageSecretRef:
      name: azure-fileshare-secret
      namespace: devcommerece
  mountOptions:
    - dir_mode=0777
    - file_mode=0777
    - uid=0
    - gid=0
    - mfsymlinks
    - cache=strict
    - nosharesock
    - nobrl
~
~

php bin/magento setup:install \
               --base-url=http://20.232.241.225/  \
               --db-host=sqlservice \
               --db-name=magento \
               --db-user=magento \
               --db-password=MyNewPass4! \
               --backend-frontname=admin \
               --admin-firstname=naveen \
               --admin-lastname=vasudevan \
               --admin-email=naidunaveen6@gmail.com \
               --admin-user=naveen \
               --admin-password=Naveen#2246 \
               --language=en_US \
               --currency=USD \
               --timezone=America/Chicago \
               --use-rewrites=1 \
               --search-engine=elasticsearch7 \
               --elasticsearch-host=elasticsearch \
               --elasticsearch-port=9200 


apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: redis
spec:
  serviceName: "redis"
  selector:
    matchLabels:
      app: redis
  updateStrategy:
    type: RollingUpdate
  replicas: 3
  template:
    metadata:
      labels:
        app: redis
    spec:
      containers:
      - name: redis
        image: redis
        resources:
          limits:
            memory: 2Gi
        ports:
          - containerPort: 6379
        volumeMounts:
          - name: redis-data
            mountPath: /usr/share/redis
  volumeClaimTemplates:                     // this will be used to create PVC
  - metadata:
      name: redis-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      resources:
        requests:
          storage: 10Gi

